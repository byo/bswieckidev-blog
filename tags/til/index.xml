<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>til on Just a dev blog</title><link>https://blog.bswiecki.dev/tags/til/</link><description>Recent content in til on Just a dev blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 18 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.bswiecki.dev/tags/til/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick way to combine io.Reader and io.Closer</title><link>https://blog.bswiecki.dev/post/2023-01-18-combining-reader-closer/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.bswiecki.dev/post/2023-01-18-combining-reader-closer/</guid><description>There are many interesting tools in Golang&amp;rsquo;s standard library to wrap io.Reader instance such as io.LimitedReader or cipher.StreamReader. But when wrapping a io.ReadCloser instance, the Close method is hidden.
Here&amp;rsquo;s a quick code snippet to combine wrapped io.Reader and the original io.Closer through an inline struct to rebuild the io.Closer interface.
Code var rc io.ReadCloser = struct { io.Reader io.Closer }{ Reader: r, Closer: c, } What it is about? The io.</description></item><item><title>Multi-CPU Github Actions with Go</title><link>https://blog.bswiecki.dev/post/2022-07-19-multi-cpu-github-actions-with-go/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.bswiecki.dev/post/2022-07-19-multi-cpu-github-actions-with-go/</guid><description>When we think about CPU architecture usually there&amp;rsquo;s one leader that comes to our mind - the famous x86-64 one. It is the main player on our desktops and on the server side. Even more recent generation of game consoles switched to that architecture from some more exotic ones.
But there are alternatives. Some are pretty well known such as the ARM one that took over the mobile market (and slowly enters the desktop world with Apple M1 laptops).</description></item></channel></rss>